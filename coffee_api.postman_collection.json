{
	"info": {
		"_postman_id": "coffee-api-collection",
		"name": "Coffee API",
		"description": "Collection for Coffee API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": ["{{baseUrl}}"],
					"path": ["health"]
				}
			},
			"response": [
				{
					"name": "Success Response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"status\": \"ok\",\n  \"timestamp\": \"2023-01-01T00:00:00.000Z\",\n  \"service\": \"coffee-api\",\n  \"version\": \"1.0.0\"\n}",
					"test": [
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"pm.test(\"Response has required fields\", function () {",
						"    var jsonData = pm.response.json();",
						"    pm.expect(jsonData).to.have.property('status');",
						"    pm.expect(jsonData).to.have.property('timestamp');",
						"    pm.expect(jsonData).to.have.property('service');",
						"    pm.expect(jsonData).to.have.property('version');",
						"});"
					]
				}
			]
		},
		{
			"name": "Health Check - Invalid Path",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/invalid",
					"host": ["{{baseUrl}}"],
					"path": ["invalid"]
				}
			},
			"response": [
				{
					"name": "Error Response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/invalid",
							"host": ["{{baseUrl}}"],
							"path": ["invalid"]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"error\": \"Not Found\"\n}",
					"test": [
						"pm.test(\"Status code is 404\", function () {",
						"    pm.response.to.have.status(404);",
						"});"
					]
				}
			]
		},
		{
			"name": "Health Check - Invalid Method",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": ["{{baseUrl}}"],
					"path": ["health"]
				}
			},
			"response": [
				{
					"name": "Error Response",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						}
					},
					"status": "Method Not Allowed",
					"code": 405,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"error\": \"Method Not Allowed\"\n}",
					"test": [
						"pm.test(\"Status code is 405\", function () {",
						"    pm.response.to.have.status(405);",
						"});"
					]
				}
			]
		},
		{
			"name": "Create Coffee - Invalid Data",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"\",\n    \"price\": -1\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/coffees",
					"host": ["{{baseUrl}}"],
					"path": ["coffees"]
				}
			},
			"response": [
				{
					"name": "Error Response",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"price\": -1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/coffees",
							"host": ["{{baseUrl}}"],
							"path": ["coffees"]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"message\": \"Error creating coffee\",\n  \"error\": \"Validation failed\"\n}",
					"test": [
						"pm.test(\"Status code is 400\", function () {",
						"    pm.response.to.have.status(400);",
						"});",
						"",
						"pm.test(\"Response has error message\", function () {",
						"    var jsonData = pm.response.json();",
						"    pm.expect(jsonData).to.have.property('message');",
						"    pm.expect(jsonData).to.have.property('error');",
						"});"
					]
				}
			]
		},
		{
			"name": "Get Coffee by ID - Not Found",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/coffees/invalid-id",
					"host": ["{{baseUrl}}"],
					"path": ["coffees", "invalid-id"]
				}
			},
			"response": [
				{
					"name": "Error Response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/coffees/invalid-id",
							"host": ["{{baseUrl}}"],
							"path": ["coffees", "invalid-id"]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"message\": \"Coffee not found\"\n}",
					"test": [
						"pm.test(\"Status code is 404\", function () {",
						"    pm.response.to.have.status(404);",
						"});",
						"",
						"pm.test(\"Response has error message\", function () {",
						"    var jsonData = pm.response.json();",
						"    pm.expect(jsonData).to.have.property('message');",
						"});"
					]
				}
			]
		},
		{
			"name": "Update Coffee - Not Found",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Updated Coffee\",\n    \"price\": 12.99\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/coffees/invalid-id",
					"host": ["{{baseUrl}}"],
					"path": ["coffees", "invalid-id"]
				}
			},
			"response": [
				{
					"name": "Error Response",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Coffee\",\n    \"price\": 12.99\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/coffees/invalid-id",
							"host": ["{{baseUrl}}"],
							"path": ["coffees", "invalid-id"]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"message\": \"Coffee not found\"\n}",
					"test": [
						"pm.test(\"Status code is 404\", function () {",
						"    pm.response.to.have.status(404);",
						"});",
						"",
						"pm.test(\"Response has error message\", function () {",
						"    var jsonData = pm.response.json();",
						"    pm.expect(jsonData).to.have.property('message');",
						"});"
					]
				}
			]
		},
		{
			"name": "Delete Coffee - Not Found",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/coffees/invalid-id",
					"host": ["{{baseUrl}}"],
					"path": ["coffees", "invalid-id"]
				}
			},
			"response": [
				{
					"name": "Error Response",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/coffees/invalid-id",
							"host": ["{{baseUrl}}"],
							"path": ["coffees", "invalid-id"]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"message\": \"Coffee not found\"\n}",
					"test": [
						"pm.test(\"Status code is 404\", function () {",
						"    pm.response.to.have.status(404);",
						"});",
						"",
						"pm.test(\"Response has error message\", function () {",
						"    var jsonData = pm.response.json();",
						"    pm.expect(jsonData).to.have.property('message');",
						"});"
					]
				}
			]
		},
		{
			"name": "Create Coffee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('_id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name).to.eql('Test Coffee');",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData.description).to.eql('A test coffee');",
							"    pm.expect(jsonData).to.have.property('price');",
							"    pm.expect(jsonData.price).to.eql(9.99);",
							"    pm.expect(jsonData).to.have.property('origin');",
							"    pm.expect(jsonData.origin).to.eql('Test Origin');",
							"    pm.expect(jsonData).to.have.property('roastLevel');",
							"    pm.expect(jsonData.roastLevel).to.eql('medium');",
							"});",
							"",
							"pm.test(\"Field types are correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(typeof jsonData._id).to.equal('string');",
							"    pm.expect(typeof jsonData.name).to.equal('string');",
							"    pm.expect(typeof jsonData.description).to.equal('string');",
							"    pm.expect(typeof jsonData.price).to.equal('number');",
							"    pm.expect(typeof jsonData.origin).to.equal('string');",
							"    pm.expect(typeof jsonData.roastLevel).to.equal('string');",
							"});",
							"",
							"// Store the created coffee ID for later use",
							"if (pm.response.code === 201) {",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set('coffeeId', jsonData._id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test Coffee\",\n    \"description\": \"A test coffee\",\n    \"price\": 9.99,\n    \"origin\": \"Test Origin\",\n    \"roastLevel\": \"medium\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/coffees",
					"host": ["{{baseUrl}}"],
					"path": ["coffees"]
				}
			}
		},
		{
			"name": "Get Coffee by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('_id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/coffees/{{coffeeId}}",
					"host": ["{{baseUrl}}"],
					"path": ["coffees", "{{coffeeId}}"]
				}
			}
		},
		{
			"name": "Update Coffee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has updated fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('_id');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name).to.eql('Updated Coffee');",
							"    pm.expect(jsonData).to.have.property('price');",
							"    pm.expect(jsonData.price).to.eql(12.99);",
							"});",
							"",
							"pm.test(\"Original fields are preserved\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData).to.have.property('origin');",
							"    pm.expect(jsonData).to.have.property('roastLevel');",
							"});",
							"",
							"pm.test(\"Field types are correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(typeof jsonData._id).to.equal('string');",
							"    pm.expect(typeof jsonData.name).to.equal('string');",
							"    pm.expect(typeof jsonData.price).to.equal('number');",
							"    pm.expect(typeof jsonData.description).to.equal('string');",
							"    pm.expect(typeof jsonData.origin).to.equal('string');",
							"    pm.expect(typeof jsonData.roastLevel).to.equal('string');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Updated Coffee\",\n    \"price\": 12.99\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/coffees/{{coffeeId}}",
					"host": ["{{baseUrl}}"],
					"path": ["coffees", "{{coffeeId}}"]
				}
			}
		},
		{
			"name": "Delete Coffee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/coffees/{{coffeeId}}",
					"host": ["{{baseUrl}}"],
					"path": ["coffees", "{{coffeeId}}"]
				}
			}
		},
		{
			"name": "Get All Coffees",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/coffees",
					"host": ["{{baseUrl}}"],
					"path": ["coffees"]
				}
			},
			"response": [
				{
					"name": "Success Response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/coffees",
							"host": ["{{baseUrl}}"],
							"path": ["coffees"]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "[]",
					"test": [
						"pm.test(\"Status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"pm.test(\"Response is an array\", function () {",
						"    var jsonData = pm.response.json();",
						"    pm.expect(Array.isArray(jsonData)).to.be.true;",
						"});",
						"",
						"pm.test(\"Each coffee item has required fields\", function () {",
						"    var jsonData = pm.response.json();",
						"    jsonData.forEach(function(coffee) {",
						"        pm.expect(coffee).to.have.property('_id');",
						"        pm.expect(coffee).to.have.property('name');",
						"        pm.expect(coffee).to.have.property('price');",
						"        pm.expect(coffee).to.have.property('description');",
						"        pm.expect(coffee).to.have.property('origin');",
						"        pm.expect(coffee).to.have.property('roastLevel');",
						"    });",
						"});",
						"",
						"pm.test(\"Price is a number\", function () {",
						"    var jsonData = pm.response.json();",
						"    jsonData.forEach(function(coffee) {",
						"        pm.expect(typeof coffee.price).to.equal('number');",
						"    });",
						"});"
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [""]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [""]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
} 